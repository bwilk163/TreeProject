@model Zadanie_Testowe.Models.TreeElement

    <li data-id=@Model.Guid data-thisParentId='@Model.ParentId' data-value=@Model.Value>
        <div
             class="draggable"
             data-elementContainer=@Model.Guid
             draggable="true"
             ondragstart="SetDraggedElement(event)"
             ondragover="OnDragOver(event)"
             ondrop="OnDragEnd(event)" >
           
            <button onclick="LoadChildren('@Model.Guid')" class="btn">></button>
            @if (User.Identity.IsAuthenticated)
            {
                if (Model.ParentId != null)
                {
                    <a onclick="AskForDel('@Model.Guid')" id="delBtn" href="#myModal" class="btn btn-danger">Delete</a>
                }

                <button data-updateId="@Model.Guid" onclick="ToggleEditInput('@Model.Guid')" class="btn">Edit</button>
            }
            <div style="display: inline" data-display=@Model.Guid onclick="Sort('@Model.Guid')">
                @Model.Value
            </div>

            @if (User.Identity.IsAuthenticated)
            {
                <form style=" display: none" data-updateFormId="@Model.Guid" onsubmit="UpdateValue(event)">
                    <input type="text" placeholder="New Name" value="@Model.Value" />
                </form>
            }
        </div>
            <div id="children" style="display: none" data-parent="@Model.Guid">
                <ul>
                </ul>
            </div>
        
            <script>
                function ToggleChildren(guid) {
                    var childrenEl = $("[data-parent=" + guid + "]");
                    if (childrenEl.css("display") == "none")
                        childrenEl.css("display", "block")
                    else
                        childrenEl.css("display", "none")

                }
                function LoadChildren(id) {
                    if (HasElement(id) == false) {
                        $.ajax({
                            url: '/Home/GetChildrenByParentId',
                            data: { parentId: id },
                            success: function (d) {
                                var parent = $("[data-parent=" + id + "] > ul");
                                $(parent).append(d)
                                childrenCreated = true;

                                AddElement(id);
                            },
                        })
                    }
                    ToggleChildren(id)
                }

                function AskForDel(guid) {
                    $("#mainDeleteBtn").attr("data-delItemId", guid);
                    $("#myModal").modal('toggle')
                }

                function ToggleEditInput(guid) {
                    var el = $("[data-updateFormId=" + guid + "]")
                    if (el.css("display") == "none")
                        el.css("display", "inline")
                    else
                        el.css("display", "none")
                }
                function UpdateValue(e) {
                    e.preventDefault();
                    var id = $(e.target).attr("data-updateformid");
                    var prevValue = $("[data-display=" + id + "]")[0].innerHTML;
                    var value = e.target[0].value;
                    $.ajax({
                        url: "/Home/UpdateElement",
                        data: {
                            elementGuid: id,
                            Value: value
                        },
                        success: function (data) {
                            if (data.Value)
                                $("[data-display=" + id + "]")[0].innerHTML = value
                            else
                                $("[data-display=" + id + "]")[0].innerHTML = prevValue;
                        },
                        error: function (e) {
                        }
                    })
                    ToggleEditInput(id);
                }

                var sortDir = -1; //1 = asc, -1 = desc
                function Sort(parentId) {
                    var $wrapper = $("[data-parent=" + parentId + "] > ul");
                    var children = $wrapper.children('li').slice(1);
                    sortDir *= -1;
                    
                    console.log(children)
                    children.sort(function (a, b) {
                        return a.dataset.value.localeCompare(b.dataset.value) * sortDir;
                    })
                        .appendTo($wrapper );
                }
            </script>
        </li>
